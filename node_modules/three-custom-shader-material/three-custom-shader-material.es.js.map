{"version":3,"file":"three-custom-shader-material.es.js","sources":["../src/React/index.tsx"],"sourcesContent":["import { AttachType } from \"@react-three/fiber/dist/declarations/src/core/renderer\";\r\nimport * as React from \"react\";\r\nimport { Material } from \"three\";\r\nimport CustomShaderMaterialImpl, { MaterialConstructor } from \"../index\";\r\nimport { CustomShaderMaterialProps } from \"./types\";\r\n\r\nfunction useDidUpdateEffect(\r\n  fn: (...opts: any[]) => any,\r\n  inputs: React.DependencyList\r\n) {\r\n  const didMountRef = React.useRef(false);\r\n\r\n  React.useEffect(() => {\r\n    if (didMountRef.current) {\r\n      return fn();\r\n    }\r\n    didMountRef.current = true;\r\n  }, inputs);\r\n}\r\n\r\nfunction CustomShaderMaterial<T extends MaterialConstructor>(\r\n  {\r\n    baseMaterial,\r\n    vertexShader,\r\n    fragmentShader,\r\n    uniforms,\r\n    cacheKey,\r\n    patchMap,\r\n    attach,\r\n    ...opts\r\n  }: CustomShaderMaterialProps<T>,\r\n  ref: React.Ref<InstanceType<T>>\r\n) {\r\n  const material = React.useMemo(() => {\r\n    return new CustomShaderMaterialImpl({\r\n      baseMaterial,\r\n      vertexShader,\r\n      fragmentShader,\r\n      uniforms,\r\n      cacheKey,\r\n      patchMap,\r\n      ...opts,\r\n    });\r\n  }, [baseMaterial]);\r\n\r\n  useDidUpdateEffect(() => {\r\n    material.update({\r\n      vertexShader,\r\n      fragmentShader,\r\n      uniforms,\r\n      patchMap,\r\n      cacheKey,\r\n    });\r\n  }, [vertexShader, fragmentShader, uniforms, patchMap, cacheKey]);\r\n\r\n  React.useEffect(() => () => material.dispose(), [material]);\r\n\r\n  return (\r\n    <primitive\r\n      ref={ref}\r\n      attach={attach ?? \"material\"}\r\n      object={material}\r\n      {...opts}\r\n    />\r\n  );\r\n}\r\n\r\n// export default React.forwardRef(CustomShaderMaterial) as <\r\n//   T extends MaterialConstructor\r\n// >(\r\n//   props: CustomShaderMaterialProps<T> & { ref?: React.Ref<InstanceType<T>> }\r\n// ) => React.ReactElement;\r\n\r\nexport default React.forwardRef(CustomShaderMaterial) as <\r\n  T extends MaterialConstructor = typeof Material\r\n>(\r\n  props: CustomShaderMaterialProps<T> & {\r\n    ref?: React.Ref<CustomShaderMaterialImpl<T>>;\r\n    attach?: AttachType;\r\n  }\r\n) => React.ReactElement;\r\n\r\nexport { type CustomShaderMaterialProps } from \"./types\";\r\n"],"names":["useDidUpdateEffect","fn","inputs","didMountRef","React","CustomShaderMaterial","baseMaterial","vertexShader","fragmentShader","uniforms","cacheKey","patchMap","attach","opts","ref","material","CustomShaderMaterialImpl","jsx","index"],"mappings":";;;AAMA,SAASA,EACPC,GACAC,GACA;AACM,QAAAC,IAAcC,EAAM,OAAO,EAAK;AAEtC,EAAAA,EAAM,UAAU,MAAM;AACpB,QAAID,EAAY;AACd,aAAOF,EAAG;AAEZ,IAAAE,EAAY,UAAU;AAAA,KACrBD,CAAM;AACX;AAEA,SAASG,EACP;AAAA,EACE,cAAAC;AAAA,EACA,cAAAC;AAAA,EACA,gBAAAC;AAAA,EACA,UAAAC;AAAA,EACA,UAAAC;AAAA,EACA,UAAAC;AAAA,EACA,QAAAC;AAAA,EACA,GAAGC;AACL,GACAC,GACA;AACM,QAAAC,IAAWX,EAAM,QAAQ,MACtB,IAAIY,EAAyB;AAAA,IAClC,cAAAV;AAAA,IACA,cAAAC;AAAA,IACA,gBAAAC;AAAA,IACA,UAAAC;AAAA,IACA,UAAAC;AAAA,IACA,UAAAC;AAAA,IACA,GAAGE;AAAA,EAAA,CACJ,GACA,CAACP,CAAY,CAAC;AAEjB,SAAAN,EAAmB,MAAM;AACvB,IAAAe,EAAS,OAAO;AAAA,MACd,cAAAR;AAAA,MACA,gBAAAC;AAAA,MACA,UAAAC;AAAA,MACA,UAAAE;AAAA,MACA,UAAAD;AAAA,IAAA,CACD;AAAA,EAAA,GACA,CAACH,GAAcC,GAAgBC,GAAUE,GAAUD,CAAQ,CAAC,GAEzDN,EAAA,UAAU,MAAM,MAAMW,EAAS,QAAW,GAAA,CAACA,CAAQ,CAAC,GAGxD,gBAAAE;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAAH;AAAA,MACA,QAAQF,KAAU;AAAA,MAClB,QAAQG;AAAA,MACP,GAAGF;AAAA,IAAA;AAAA,EACN;AAEJ;AAQA,MAAAK,IAAed,EAAM,WAAWC,CAAoB;"}