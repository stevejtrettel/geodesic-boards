{"version":3,"file":"three-custom-shader-material.cjs.js","sources":["../src/React/index.tsx"],"sourcesContent":["import { AttachType } from \"@react-three/fiber/dist/declarations/src/core/renderer\";\r\nimport * as React from \"react\";\r\nimport { Material } from \"three\";\r\nimport CustomShaderMaterialImpl, { MaterialConstructor } from \"../index\";\r\nimport { CustomShaderMaterialProps } from \"./types\";\r\n\r\nfunction useDidUpdateEffect(\r\n  fn: (...opts: any[]) => any,\r\n  inputs: React.DependencyList\r\n) {\r\n  const didMountRef = React.useRef(false);\r\n\r\n  React.useEffect(() => {\r\n    if (didMountRef.current) {\r\n      return fn();\r\n    }\r\n    didMountRef.current = true;\r\n  }, inputs);\r\n}\r\n\r\nfunction CustomShaderMaterial<T extends MaterialConstructor>(\r\n  {\r\n    baseMaterial,\r\n    vertexShader,\r\n    fragmentShader,\r\n    uniforms,\r\n    cacheKey,\r\n    patchMap,\r\n    attach,\r\n    ...opts\r\n  }: CustomShaderMaterialProps<T>,\r\n  ref: React.Ref<InstanceType<T>>\r\n) {\r\n  const material = React.useMemo(() => {\r\n    return new CustomShaderMaterialImpl({\r\n      baseMaterial,\r\n      vertexShader,\r\n      fragmentShader,\r\n      uniforms,\r\n      cacheKey,\r\n      patchMap,\r\n      ...opts,\r\n    });\r\n  }, [baseMaterial]);\r\n\r\n  useDidUpdateEffect(() => {\r\n    material.update({\r\n      vertexShader,\r\n      fragmentShader,\r\n      uniforms,\r\n      patchMap,\r\n      cacheKey,\r\n    });\r\n  }, [vertexShader, fragmentShader, uniforms, patchMap, cacheKey]);\r\n\r\n  React.useEffect(() => () => material.dispose(), [material]);\r\n\r\n  return (\r\n    <primitive\r\n      ref={ref}\r\n      attach={attach ?? \"material\"}\r\n      object={material}\r\n      {...opts}\r\n    />\r\n  );\r\n}\r\n\r\n// export default React.forwardRef(CustomShaderMaterial) as <\r\n//   T extends MaterialConstructor\r\n// >(\r\n//   props: CustomShaderMaterialProps<T> & { ref?: React.Ref<InstanceType<T>> }\r\n// ) => React.ReactElement;\r\n\r\nexport default React.forwardRef(CustomShaderMaterial) as <\r\n  T extends MaterialConstructor = typeof Material\r\n>(\r\n  props: CustomShaderMaterialProps<T> & {\r\n    ref?: React.Ref<CustomShaderMaterialImpl<T>>;\r\n    attach?: AttachType;\r\n  }\r\n) => React.ReactElement;\r\n\r\nexport { type CustomShaderMaterialProps } from \"./types\";\r\n"],"names":["useDidUpdateEffect","fn","inputs","didMountRef","React","CustomShaderMaterial","baseMaterial","vertexShader","fragmentShader","uniforms","cacheKey","patchMap","attach","opts","ref","material","CustomShaderMaterialImpl","jsx","index"],"mappings":"0ZAMA,SAASA,EACPC,EACAC,EACA,CACM,MAAAC,EAAcC,EAAM,OAAO,EAAK,EAEtCA,EAAM,UAAU,IAAM,CACpB,GAAID,EAAY,QACd,OAAOF,EAAG,EAEZE,EAAY,QAAU,IACrBD,CAAM,CACX,CAEA,SAASG,EACP,CACE,aAAAC,EACA,aAAAC,EACA,eAAAC,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,OAAAC,EACA,GAAGC,CACL,EACAC,EACA,CACM,MAAAC,EAAWX,EAAM,QAAQ,IACtB,IAAIY,EAAyB,CAClC,aAAAV,EACA,aAAAC,EACA,eAAAC,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,GAAGE,CAAA,CACJ,EACA,CAACP,CAAY,CAAC,EAEjB,OAAAN,EAAmB,IAAM,CACvBe,EAAS,OAAO,CACd,aAAAR,EACA,eAAAC,EACA,SAAAC,EACA,SAAAE,EACA,SAAAD,CAAA,CACD,CAAA,EACA,CAACH,EAAcC,EAAgBC,EAAUE,EAAUD,CAAQ,CAAC,EAEzDN,EAAA,UAAU,IAAM,IAAMW,EAAS,QAAW,EAAA,CAACA,CAAQ,CAAC,EAGxDE,EAAA,IAAC,YAAA,CACC,IAAAH,EACA,OAAQF,GAAU,WAClB,OAAQG,EACP,GAAGF,CAAA,CACN,CAEJ,CAQA,MAAAK,EAAed,EAAM,WAAWC,CAAoB"}